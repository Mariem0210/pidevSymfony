{{ form_start(form, {'attr': {'id': 'formationForm', 'class': 'needs-validation'}}) }}
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.nomf, 'Nom', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.nomf, {'attr': {'class': 'form-control', 'oninput': 'validateField(this)'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.nomf) }}</span>
            </div>
        </div>
        
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.niveauf, 'Niveau', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.niveauf, {'attr': {'class': 'form-control', 'oninput': 'validateField(this)'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.niveauf) }}</span>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-12 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.descriptionf, 'Description', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.descriptionf, {'attr': {'class': 'form-control', 'rows': '4', 'oninput': 'validateField(this)'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.descriptionf) }}</span>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.dateDebut, 'Date de début', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.dateDebut, {'attr': {'class': 'form-control', 'min': 'now' | date('Y-m-d'), 'onchange': 'validateDates()'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.dateDebut) }}</span>
            </div>
        </div>
        
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.dateFin, 'Date de fin', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.dateFin, {'attr': {'class': 'form-control', 'onchange': 'validateDates()'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.dateFin) }}</span>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.capacitef, 'Capacité', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.capacitef, {'attr': {'class': 'form-control', 'oninput': 'validateField(this)'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.capacitef) }}</span>
            </div>
        </div>
        
        <div class="col-md-6 mb-3">
            <div class="input-group input-group-static mb-4">
                {{ form_label(form.prixf, 'Prix (DT)', {'label_attr': {'class': 'ms-0'}}) }}
                {{ form_widget(form.prixf, {'attr': {'class': 'form-control', 'oninput': 'validateField(this)'}}) }}
                <span class="text-danger error-message">{{ form_errors(form.prixf) }}</span>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <button type="submit" class="btn bg-gradient-primary">
                <i class="material-icons text-sm me-2">save</i>
                {{ button_label|default('Enregistrer') }}
            </button>
        </div>
    </div>
{{ form_end(form) }}

<script>
document.addEventListener("DOMContentLoaded", function() {
    const today = new Date().toISOString().split('T')[0];
    // Fix potential ID mismatch
    const dateDebutField = document.querySelector('input[id$="_dateDebut"]');
    if (dateDebutField) {
        dateDebutField.setAttribute("min", today);
    }
});

function validateField(field) {
    let errorSpan = field.closest('.input-group').querySelector('.error-message');
    if (!field.checkValidity()) {
        errorSpan.textContent = field.validationMessage;
        field.classList.add('is-invalid');
    } else {
        errorSpan.textContent = "";
        field.classList.remove('is-invalid');
    }
}

function validateDates() {
    // Fix potential ID mismatch
    const dateDebut = document.querySelector('input[id$="_dateDebut"]');
    const dateFin = document.querySelector('input[id$="_dateFin"]');
    
    if (!dateDebut || !dateFin) return;
    
    let errorSpan = dateFin.closest('.input-group').querySelector('.error-message');
    
    if (dateFin.value && dateDebut.value && new Date(dateFin.value) <= new Date(dateDebut.value)) {
        errorSpan.textContent = "La date de fin doit être après la date de début.";
        dateFin.classList.add('is-invalid');
    } else {
        errorSpan.textContent = "";
        dateFin.classList.remove('is-invalid');
    }
}
</script>

<style>
.error-message {
    display: block;
    font-size: 0.75rem;
    margin-top: 0.25rem;
}

.is-invalid {
    border-color: #f44335 !important;
}
</style>